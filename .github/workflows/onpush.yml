name: CI pipeline

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - 'v*' # this tag type is used for release pipelines

jobs:
  ci-pipeline:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4

    env:
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      DATABRICKS_TOKEN:  ${{ secrets.DATABRICKS_TOKEN }}

    steps:
      - uses: actions/checkout@v1

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip' # caching pip dependencies
          cache-dependency-path: setup.py

      # - name: Install pip
      #   run: |
      #     python -m pip install --upgrade pip

      # - name: Install dependencies and project in dev mode
      #   run: |
      #     pip install -e ".[local,test]"

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
     #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction

      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run unit tests
        run: |
          source .venv/bin/activate
          pytest tests/ -m "not integration"
      
      - name: Run integration test with dbconnect
        env: 
          DATABRICKS_HOST: ${{secrets.DATABRICKS_HOST}}
          DATABRICKS_TOKEN: ${{secrets.DATABRICKS_TOKEN}}
          DATABRICKS_CLUSTER_ID: ${{secrets.DATABRICKS_CLUSTER_ID}}
        run: |
          source .venv/bin/activate
          pytest tests/ -m "integration"

      - name: Deploy integration test
        env: 
          DATABRICKS_HOST: ${{secrets.DATABRICKS_HOST}}
          DATABRICKS_TOKEN: ${{secrets.DATABRICKS_TOKEN}}
        run: |
            source .venv/bin/activate
            poetry build
            ls
            dbx deploy
      - name: Run integration test
        env: 
          DATABRICKS_HOST: ${{secrets.DATABRICKS_HOST}}
          DATABRICKS_TOKEN: ${{secrets.DATABRICKS_TOKEN}}
        run: | 
              source .venv/bin/activate
              dbx launch --trace databricks_with_poetry-sample-tests

      # - name: Run unit tests
      #   run: |
      #     echo "Launching unit tests"
      #     pytest tests/unit

      # - name: Workflow deployment (assets only upload)
      #   run: |
      #     dbx deploy databricks_with_poetry-sample-etl --assets-only

      # - name: Run the workflow in a jobless fashion
      #   run: |
      #     dbx launch databricks_with_poetry-sample-etl --from-assets --trace


